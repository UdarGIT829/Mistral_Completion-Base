name: CI

# Triggers the workflow on push or pull request events
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11.7'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Install gdown
      run: pip install gdown

    - name: Create model directory
      run: mkdir -p ./model/OpenHermes-2.5-Mistral-7B-GGUF

    - name: Cache model directory
      id: cache-model
      uses: actions/cache@v3
      with:
        path: ./model/OpenHermes-2.5-Mistral-7B-GGUF
        key: model-2bcab7ce5ae8346d45538bf945b2536dec1eaa28
        restore-keys: |
          model-

    - name: Check Cache Status
      run: echo "Cache hit status ${{ steps.cache-model.outputs.cache-hit }}"

    - name: Download .gguf file if not cached
      if: steps.cache-model.outputs.cache-hit != 'true'
      run: |
        gdown --id ${{ secrets.GOOGLE_DRIVE_FILE_ID_MISTRAL_MODEL }} -O ./model/OpenHermes-2.5-Mistral-7B-GGUF/openhermes-2.5-mistral-7b.Q4_K_M.gguf

    - name: Download config.json if not cached
      if: steps.cache-model.outputs.cache-hit != 'true'
      run: |
        gdown --id ${{ secrets.GOOGLE_DRIVE_FILE_ID_MISTRAL_CONFIG }} -O ./model/OpenHermes-2.5-Mistral-7B-GGUF/config.json

    - name: Start Application Server
      run: |
        nohup python3 app.py > server.log 2>&1 &
        echo $! > APP_PID

    - name: Health Check
      run: |
        sleep 10 # Wait for the server to start
        curl --retry 5 --retry-delay 10 --retry-connrefused http://localhost:9001/health -X POST -d '{"status":"ok"}' -H "Content-Type: application/json"
    
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Run Tests
      run: |
        python3 test.py
    
    - name: Cleanup
      if: always()
      run: |
        kill $(cat APP_PID)
    - name: Print Server Log
      if: always()
      run: cat server.log